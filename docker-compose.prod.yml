version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: buildship_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-buildship}
      POSTGRES_USER: ${POSTGRES_USER:-buildship_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-buildship_user} -d ${POSTGRES_DB:-buildship}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - buildship_network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: buildship_redis_prod
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - buildship_network
    restart: unless-stopped

  # FastAPI Application
  app:
    image: ${DOCKER_IMAGE:-ghcr.io/your-username/buildship-fastapi:${MAJOR_MINOR:-latest}}
    container_name: buildship_app_prod
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://${POSTGRES_USER:-buildship_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-buildship}}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - buildship_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx (optional, for load balancing and SSL termination)
  nginx:
    image: nginx:alpine
    container_name: buildship_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - buildship_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  buildship_network:
    driver: bridge 