name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'

jobs:
  # Quick Tests for PR
  quick-tests:
    name: Quick Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=false" >> $GITHUB_ENV
        echo "LOG_LEVEL=INFO" >> $GITHUB_ENV

    - name: Wait for database
      run: |
        echo "Waiting for database to be ready..."
        sleep 10

    - name: Initialize database
      run: |
        python -c "from app.database import init_db; init_db(); print('âœ… Database initialized')"

    - name: Run all tests
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=term-missing --cov-fail-under=90

    - name: Run linting
      run: |
        flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503 --count

    - name: Run type checking
      run: |
        mypy app/ --ignore-missing-imports

    - name: Check code formatting
      run: |
        black --check app/ tests/ --line-length=88
        isort --check-only app/ tests/ --profile=black

    - name: Run Security Scan
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Build Docker Image
      run: |
        docker build -t buildship-fastapi:test .
        echo "Docker build successful" 