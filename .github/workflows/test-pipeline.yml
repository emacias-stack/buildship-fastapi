name: Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7-alpine'

jobs:
  # Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=false" >> $GITHUB_ENV
        echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
        echo "ENABLE_METRICS=true" >> $GITHUB_ENV

    - name: Wait for database
      run: |
        echo "Waiting for database to be ready..."
        sleep 10

    - name: Initialize database
      run: |
        python -c "from app.database import init_db; init_db(); print('✅ Database initialized')"

    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=app --cov-report=term-missing --cov-report=xml --junitxml=test-results-unit.xml

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --cov=app --cov-report=term-missing --cov-report=xml --junitxml=test-results-integration.xml

    - name: Run all tests with coverage
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=90 --junitxml=test-results.xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test-results*.xml
          htmlcov/
          .coverage

  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting (flake8)
      run: |
        flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503 --count --show-source --statistics

    - name: Run type checking (mypy)
      run: |
        mypy app/ --ignore-missing-imports

    - name: Check code formatting (black)
      run: |
        black --check app/ tests/ --line-length=88

    - name: Check import sorting (isort)
      run: |
        isort --check-only app/ tests/ --profile=black

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install k6
      uses: grafana/k6-action@v0.3.0
      with:
        filename: k6/quick-test.js

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/testdb" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DEBUG=false" >> $GITHUB_ENV
        echo "LOG_LEVEL=INFO" >> $GITHUB_ENV

    - name: Wait for database
      run: |
        echo "Waiting for database to be ready..."
        sleep 10

    - name: Initialize database
      run: |
        python -c "from app.database import init_db; init_db(); print('✅ Database initialized')"

    - name: Start application
      run: |
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        echo "Waiting for application to start..."
        sleep 10
        curl -f http://localhost:8000/health || exit 1

    - name: Run quick performance test
      run: |
        k6 run k6/quick-test.js --out json=perf-results.json

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: perf-results.json

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  # Build and Test Docker Image
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, code-quality]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t buildship-fastapi:test .

    - name: Test Docker image
      run: |
        docker run -d --name test-app -p 8000:8000 buildship-fastapi:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-app
        docker rm test-app

  # Final Status Check
  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [test, code-quality, performance, security, docker-test]
    if: always()

    steps:
    - name: Check job status
      run: |
        echo "Test Pipeline Status:"
        echo "Unit & Integration Tests: ${{ needs.test.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Performance Tests: ${{ needs.performance.result }}"
        echo "Security Scan: ${{ needs.security.result }}"
        echo "Docker Test: ${{ needs.docker-test.result }}"
        
        # Fail if any required job failed
        if [[ "${{ needs.test.result }}" == "failure" ]] || [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
          echo "❌ Critical tests failed!"
          exit 1
        fi
        
        if [[ "${{ needs.docker-test.result }}" == "failure" ]]; then
          echo "❌ Docker build test failed!"
          exit 1
        fi
        
        echo "✅ All critical tests passed!" 